networks:
  gitlab:
    image: gitlab/dind:latest
services:
  - docker:dind
before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
stages:
  - build
  - deploy
build:
  stage: build
  script:
    # 도커 빌드함
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:latest .
    # 빌드한 컨테이너를 push해서 올림
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:latest
  tags:
    - docker
  only:
  - main
  - merge_requests

deploy:
  stage: deploy
  script:
    ######  SSH로 서버 접속 #####
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SERVER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOYMENT_SERVER_IP >> ~/.ssh/known_hosts  
    # 레지스트리에 로그인
    - ssh $DEPLOYMENT_SERVER_USERNAME@$DEPLOYMENT_SERVER_IP docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY 
    # 레지스트리에서 pull로 댕겨옴
    - ssh $DEPLOYMENT_SERVER_USERNAME@$DEPLOYMENT_SERVER_IP docker pull $CI_REGISTRY/$CI_PROJECT_PATH:latest
    # 댕겨온 컨테이너를 docker compose로 올려줌!
    - ssh $DEPLOYMENT_SERVER_USERNAME@$DEPLOYMENT_SERVER_IP docker-compose -f $DOCKER_COMPOSE_FILE_PATH/$DOCKER_COMPOSE_FILE_NAME up -d $CI_PROJECT_NAME
  only:
    - main
    - merge_requests
  tags:
    - docker
  rules:
    - if: $CI_MERGE_REQUEST_APPROVED
